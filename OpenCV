import android.content.Intent
import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.net.Uri
import android.os.Bundle
import android.provider.OpenableColumns
import android.widget.*
import androidx.appcompat.app.AppCompatActivity
import java.io.*

class MainActivity : AppCompatActivity() {

    private lateinit var uploadButton: Button
    private lateinit var convertButton: Button
    private lateinit var beforeSizeText: TextView
    private lateinit var afterSizeText: TextView
    private lateinit var imageView: ImageView

    private var imageUri: Uri? = null
    private var originalImageSize: Long = 0

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        // Initialize UI components
        uploadButton = findViewById(R.id.uploadButton)
        convertButton = findViewById(R.id.convertButton)
        beforeSizeText = findViewById(R.id.beforeSizeText)
        afterSizeText = findViewById(R.id.afterSizeText)
        imageView = findViewById(R.id.imageView)

        // Set up button listeners
        uploadButton.setOnClickListener { openImagePicker() }
        convertButton.setOnClickListener { convertToTiff() }
    }

    private fun openImagePicker() {
        val intent = Intent(Intent.ACTION_OPEN_DOCUMENT).apply {
            type = "image/*"
            addCategory(Intent.CATEGORY_OPENABLE)
        }
        startActivityForResult(intent, 100)
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        if (requestCode == 100 && resultCode == RESULT_OK) {
            imageUri = data?.data
            imageUri?.let {
                val inputStream = contentResolver.openInputStream(it)
                val bitmap = BitmapFactory.decodeStream(inputStream)
                imageView.setImageBitmap(bitmap)

                // Display original image size
                originalImageSize = getFileSize(it)
                beforeSizeText.text = "Original Image Size: $originalImageSize bytes"
            }
        }
    }

    private fun getFileSize(uri: Uri): Long {
        var size: Long = 0
        contentResolver.query(uri, null, null, null, null)?.use { cursor ->
            val sizeIndex = cursor.getColumnIndex(OpenableColumns.SIZE)
            cursor.moveToFirst()
            size = cursor.getLong(sizeIndex)
        }
        return size
    }

    private fun convertToTiff() {
        if (imageUri == null) {
            Toast.makeText(this, "Please upload an image first", Toast.LENGTH_SHORT).show()
            return
        }

        try {
            val inputStream = contentResolver.openInputStream(imageUri!!)
            val bitmap = BitmapFactory.decodeStream(inputStream)

            // Convert image to binary (black and white)
            val binaryBitmap = convertToBinary(bitmap)

            // Create output TIFF file
            val tiffFile = File(externalCacheDir, "converted_image.tiff")
            val outputStream = FileOutputStream(tiffFile)

            // Convert to TIFF format
            writeTiff(outputStream, binaryBitmap)

            // Close the output stream
            outputStream.close()

            // Display converted TIFF size
            val tiffFileSize = tiffFile.length()
            afterSizeText.text = "Converted TIFF Image Size: $tiffFileSize bytes"

            if (tiffFileSize < originalImageSize) {
                Toast.makeText(this, "TIFF conversion successful. File size reduced!", Toast.LENGTH_SHORT).show()
            } else {
                Toast.makeText(this, "TIFF conversion done, but file size is larger.", Toast.LENGTH_SHORT).show()
            }
        } catch (e: Exception) {
            e.printStackTrace()
            Toast.makeText(this, "Error converting to TIFF", Toast.LENGTH_SHORT).show()
        }
    }

    private fun convertToBinary(bitmap: Bitmap): Bitmap {
        val width = bitmap.width
        val height = bitmap.height
        val binaryBitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)

        for (y in 0 until height) {
            for (x in 0 until width) {
                val pixel = bitmap.getPixel(x, y)
                val gray = (0.299 * ((pixel shr 16) and 0xFF) +
                            0.587 * ((pixel shr 8) and 0xFF) +
                            0.114 * (pixel and 0xFF)).toInt()
                val binaryColor = if (gray < 128) 0xFF000000.toInt() else 0xFFFFFFFF.toInt()
                binaryBitmap.setPixel(x, y, binaryColor)
            }
        }
        return binaryBitmap
    }

    private fun writeTiff(outputStream: OutputStream, binaryBitmap: Bitmap) {
        val width = binaryBitmap.width
        val height = binaryBitmap.height
        val byteArray = ByteArray(width * height)

        for (y in 0 until height) {
            for (x in 0 until width) {
                val pixel = binaryBitmap.getPixel(x, y)
                byteArray[y * width + x] = if (pixel == 0xFF000000.toInt()) 0 else 1
            }
        }

        val buffer = ByteArrayOutputStream()
        val littleEndian = ByteOrder.LITTLE_ENDIAN

        // Write TIFF headers and data
        // TIFF Header
        buffer.writeShort(0x4949.toShort(), littleEndian) // Little-endian
        buffer.writeShort(42, littleEndian) // TIFF Identifier
        buffer.writeInt(8, littleEndian) // Offset to first IFD

        // Additional steps for writing compressed image data
        // Write the buffer to the output stream
        outputStream.write(buffer.toByteArray())
    }
}
